# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1
orbs:
  codecov: codecov/codecov@1.0.5
executors:
  docker-slim_trial:
    environment:
      IMAGE_NAME: connpfm/connpfm_slim_trial
    docker:
      - image: circleci/buildpack-deps:stretch

  docker-slim_latest:
    environment:
      IMAGE_NAME: connpfm/connpfm_slim_latest
    docker:
      - image: circleci/buildpack-deps:stretch

jobs:

  py36_unittest:
    working_directory: /tmp/src/connPFM
    docker:
      - image: connpfm/afni_miniconda
    steps:
      - checkout
      - persist_to_workspace:
          root: /tmp
          paths:
              - src/connPFM
      - run:  # will overwrite connPFM installation each time
          name: Generate environment
          command:  |
            if [[ -e /opt/conda/envs/py36_env ]]; then
                echo "Restoring environment from cache"
                cp -r /opt/conda/envs/py39_env /opt/miniconda-latest/envs/py39_env
                source activate py36_env
            else
                conda create -n py36_env python=3.6 numpy -yq
                source activate py36_env
                pip install -e .[tests]
            fi
            python setup.py install --user
      - run:
          name: Run tests
          command:  |
            apt-get update
            apt-get install -yqq make
            source activate py36_env
            make unittest

  py37_unittest:
    working_directory: /tmp/src/connPFM
    docker:
      - image: connpfm/afni_miniconda
    steps:
      - checkout
      - persist_to_workspace:
          root: /tmp
          paths:
              - src/connPFM
      - run:  # will overwrite connPFM installation each time
          name: Generate environment
          command:  |
            if [[ -e /opt/conda/envs/py37_env ]]; then
                echo "Restoring environment from cache"
                cp -r /opt/conda/envs/py39_env /opt/miniconda-latest/envs/py39_env
                source activate py37_env
            else
                conda create -n py37_env python=3.7 numpy -yq
                source activate py37_env
                pip install -e .[tests]
            fi
            python setup.py install --user
      - run:
          name: Run tests
          command:  |
            apt-get update
            apt-get install -yqq make
            source activate py37_env
            make unittest

  py38_unittest:
    working_directory: /tmp/src/connPFM
    docker:
      - image: connpfm/afni_miniconda
    steps:
      - checkout
      - persist_to_workspace:
          root: /tmp
          paths:
              - src/connPFM
      - run:  # will overwrite connPFM installation each time
          name: Generate environment
          command:  |
            if [[ -e /opt/conda/envs/py38_env ]]; then
                echo "Restoring environment from cache"
                cp -r /opt/conda/envs/py39_env /opt/miniconda-latest/envs/py39_env
                source activate py38_env
            else
                conda create -n py38_env python=3.8 numpy -yq
                source activate py38_env
                pip install pip -U
                pip install -e .[tests]
            fi
            python setup.py install --user
      - run:
          name: Run tests
          command:  |
            apt-get update
            apt-get install -yqq make
            source activate py38_env
            make unittest

  py39_env:
    working_directory: /tmp/src/connPFM
    docker:
      - image: continuumio/miniconda3
    steps:
      - checkout
      - persist_to_workspace:
          root: /tmp
          paths:
              - src/connPFM
      - restore_cache:  # ensure this step occurs *before* installing dependencies
          key: deps1-{{ checksum "connPFM/info.py" }}-{{ checksum "setup.py" }}
      - run:  # will overwrite connPFM installation each time
          name: Generate environment
          command:  |
            if [[ -e /opt/conda/envs/py39_env ]]; then
                echo "Restoring environment from cache"
                source activate py39_env
            else
                conda create -n py39_env python=3.9 numpy -yq
                source activate py39_env
                pip install -e .[tests,doc]
            fi
            python setup.py install --user
      - save_cache:  # environment cache tied to requirements
          key: deps1-{{ checksum "connPFM/info.py" }}-{{ checksum "setup.py" }}
          paths:
            - "/opt/conda/envs/py39_env"


  py39_unittest_and_coverage:
    working_directory: /tmp/src/connPFM
    docker:
      - image: connpfm/afni_miniconda
    steps:
      - attach_workspace:  # get connPFM
          at: /tmp
      - restore_cache:  # load environment
          key: deps1-{{ checksum "connPFM/info.py" }}-{{ checksum "setup.py" }}
      - run:
          name: Run tests and compile coverage
          command:  |
            apt-get update
            apt-get install -yqq make
            apt-get install -yqq curl
            cp -r /opt/conda/envs/py39_env /opt/miniconda-latest/envs/py39_env
            source activate py39_env
            make unittest
      - codecov/upload:
          file: /tmp/src/connPFM/coverage.xml

  build_docs:
    working_directory: /tmp/src/connPFM
    docker:
      - image: continuumio/miniconda3
    steps:
      - attach_workspace:  # get connPFM
          at: /tmp
      - restore_cache:  # load environment
          key: deps1-{{ checksum "connPFM/info.py" }}-{{ checksum "setup.py" }}
      - run:
          name: Build documentation
          command: |
            source activate py39_env
            apt-get update
            apt-get install -yqq make pandoc
            make -C docs html
          no_output_timeout: 30m
      - store_artifacts:
          path: /tmp/src/connPFM/docs/_build/html

  style_check:
    working_directory: /tmp/src/connPFM
    docker:
      - image: continuumio/miniconda3
    steps:
      - attach_workspace:  # get connPFM
          at: /tmp
      - restore_cache:  # load environment
          key: deps1-{{ checksum "connPFM/info.py" }}-{{ checksum "setup.py" }}
      - run:
          name: Linting
          command:  |
            source activate py39_env
            flake8 /tmp/src/connPFM/connPFM
      - store_artifacts:
          path: /tmp/data/lint

  build_slim_trial: # this job creates a docker container for trial use only
    executor: docker-slim_trial
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: |
            docker build -t $IMAGE_NAME:latest docker_slim
      - run:
          name: Archive Docker image
          command: docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar
  
  build_slim_latest:  # this job creates a docker container that will be created in each push to main
    executor: docker-slim_latest
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: |
            docker build -t $IMAGE_NAME:latest docker_slim
      - run:
          name: Archive Docker image
          command: docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar
  
  publish-trial: #  # this job publishes the trial container in docker
    executor: docker-slim_trial
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: check docker username
          command: echo $DOCKERHUB_USERNAME
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push $IMAGE_NAME:latest
  
  publish-latest: # this job publishes the latest container in docker
    executor: docker-slim_latest
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: check docker username
          command: echo $DOCKERHUB_USERNAME
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push $IMAGE_NAME:latest

workflows:
  version: 2.1
  run_tests:
    jobs:
      - py39_env
      - style_check:
          requires:
            - py39_env
      - py39_unittest_and_coverage:
          requires:
            - py39_env
      - build_slim_latest:
          requires:
           - py39_unittest_and_coverage
          filters:
            branches:
              only: main
      - publish-latest:
          requires:
            - build_slim_latest
          filters:
            branches:
              only: main
      - hold: # this job allows us tu run certain jobs with manual approval
          type: approval
          filter:
            branches:
              only: /pull\/.*/
      - build_slim_trial:
          requires:
            - hold
      - publish-trial:
          requires:
            - build_slim_trial
      # # - build_docs:
      #     requires:
      #       - py39_env
